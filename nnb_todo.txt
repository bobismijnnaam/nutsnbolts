----------------
-- Short term --
----------------

+ Testing!
	+ Especially game state machine, lol
+ Change all file description dates to YYYY-MM-DD. Done at some places but not
all.
+ Something that allows resolution-independent development
	+ Likely together with ECS?
+ Debug facilities for standard structures (sdl_point, vector, etc)
+ ECS
+ Make nnb::Text support multiline. Should work always (if people want to
disable it, s/\\n//g
+ Custom cursor sdl wrapper
	+ Maybe use nnb::Image for this?
+ Change the subsystem class to NNBContext. Can also be used to store
g_window, g_renderer, etc?
	+ Global g_nnb var supplied 
	+ window (SDL_Window)
	+ windowSurface (SDL_Surface)
	+ renderer (SDL_Renderer)
	+ gm (nnb::GameStateManager)
	+ tm (nnb::TextureManager)
	+ if font subsystem is initialzed, an fm (nnb::FontManager)
	+ if sound subsystem is initialized, an sm (nnb::SoundManager)
	+ GL initializement
	+ [] operator for getting variables
		+ backed by json
		+ ex: g_nnb["scrW"].int() should return an int
+ StateMachine
	+ Some default transitions, and some default loading screens
+ Make CMake gobble up all the headers 'n stuff
+ A thing to handle fragment/vertex shaders
+ SoundManager! Also in context
+ Change math stuff into glm classes?
+ Think about some common containers
	+ Templated color class?
	+ Templated rectangle?
	+ Conversion from/to SDL/GLM equivalents?
	+ operator<< or toString methods?
+ Use assert() more often!
+ Own jpeg/png loaders
+ Replace all uses of std::endl with \n. Blasphemy!
+ More toString()/operator<<() methods!

---------------
-- Long term --
---------------

+ Integrate THE image class
	+ Refactor it to a nicer/consistent api while you're at it
		+ Especially the alpha stuff. Brr.
+ Own freetype api
+ Thread safe random facilities
